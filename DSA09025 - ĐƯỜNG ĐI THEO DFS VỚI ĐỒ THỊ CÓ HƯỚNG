#include <bits/stdc++.h>
#define N 100000
using namespace std;
#define ll long long
bool visited[1001];
vector<int> adj[1001];
int parent[1001];
void dfs(int u)
{
    visited[u] = true;
    for (int i = 0; i < adj[u].size(); i++)
    {
        if (!visited[adj[u][i]])
        {
            parent[adj[u][i]] = u;
            dfs(adj[u][i]);
        }
    }
    // for (int v : adj[x])
    // {
    //     if (!visited[v])
    //     {
    //         dfs(v);
    //     }
    // }
}
void bfs(int u)
{
    queue<int> q;
    q.push(u);
    visited[u] = true;
    while (q.size() > 0)
    {
        int x = q.front();
        q.pop();
        // for (int v : adj[x])
        // {
        //     if (!visited[v])
        //     {
        //         q.push(v);
        //         visited[v] = true;
        //     }
        // }
        for (int i = 0; i < adj[x].size(); i++)
        {
            if (!visited[adj[x][i]])
            {
                parent[adj[x][i]] = x;
                q.push(adj[x][i]);
                visited[adj[x][i]] = true;
            }
        }
    }
}

void Path(int s, int t)
{
    dfs(s);
    if (visited[t] == 0)
    {
        cout << -1 << endl;
    }
    else
    {
        vector<int> path;
        while (t != s)
        {
            path.push_back(t);
            t = parent[t];
        }
        path.push_back(s);
        reverse(path.begin(), path.end());
        for (int i = 0; i < path.size(); i++)
        {
            cout << path[i] << " ";
        }
        cout << endl;
    }
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int t;
    cin >> t;
    while (t--)
    {
        int res = 0;
        int n, m, s, t;
        cin >> n >> m >> s >> t;
        for (int i = 1; i <= 1000; i++)
        {
            adj[i].clear();
        }
        memset(visited, false, sizeof(visited));
        memset(parent, false, sizeof(parent));
        for (int i = 0; i < m; i++)
        {
            int x, y;
            cin >> x >> y;
            adj[x].push_back(y);
        }
        Path(s, t);
    }
    system("pause");
    return 0;
}
